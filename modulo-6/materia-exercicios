//O conceito:

//Funções são blocos de código que podem ser executado de forma modular.
//Elas auxiliam a não repetirmos código e funcionam como caixa de ferramentas para problemas que às vezes encontramos de forma recorrente no código. Ex: Carrinho de compras


//Nesses primeiros exercícios nem conversaremos sobre funções, o objetivo deles é "entender a dor" primeiro.


// Exercícios:


// Para melhor organização recomenda-se criarem arquivos separados para cada exercícios;
// A nomeação padrão dos arquivos é: "Ex01" para o primeiro e assim por diante;

// 1 - Crie um programa que exibe a mensagem "Olá, Bruno!"

// 2 - Crie um programa que exiba a mensagem "Olá, Amanda!"

// 3 - Crie um programa que exiba a mesma mensagem porém com o seu nome.


const produtos = [
    "Café",
    "Arroz",
    "Feijão",
    "Azeite de Oliva",
    "Pão",
    "Leite",
    "Queijo",
    "Manteiga",
    "Macarrão",
    "Chocolate"
];

// 4 - Crie um programa que filtra a lista produtos pela letra "a"

// 5 - Crie um programa que filtra a lista produtos pela letra "e"

--------------------------------------------------------------

// 6 - Crie uma função que recebe como parâmetro um nome e imprime no console uma mensagem de boas vindas utilizando o nome informado. Execute a função três vezes com diferentes nomes, apenas para testar.

--------------------------------------------------------------

// 7 - Crie uma função que recebe como parâmetro uma string e imprime individualmente cada um de seus caracteres.

--------------------------------------------------------------

// 8  - Crie uma função que receba como parametro uma lista de palavras e uma letra e filtra a lista a partir dessa letra.

const produtos = [
    "Café",
    "Arroz",
    "Feijão",
    "Azeite de Oliva",
    "Pão",
    "Leite",
    "Queijo",
    "Manteiga",
    "Macarrão",
    "Chocolate"
];

--------------------------------------------------------------

// 9 - Crie um programa que conta quantas vogais possui uma palavra;
// Teste sua função para pelo menos 4 palavras diferentes à sua escolha

--------------------------------------------------------------

// Crie uma função que realiza a soma entre dois valores recebidos como parâmetros.

// Crie uma função que realiza a subtração entre dois valores recebidos como parâmetros.

// Crie um programa que realiza a multiplicação entre dois valores recebeidos como parâmetros.

// Crie um programa que realiza a divisão entre dois valores recebeidos como parâmetros.

--------------------------------------------------------------

// Estrutura básica de funções:

// A palavra-chave em JavaScript para declarar uma função é "function" seguida pelo nome da função:

function boasVindas(nome) {
    return `Seja bem-vindo ${nome}`;
}

// Qualquer palavra que venha dentro dos parênteses da função quando esta é declarada é chamada de parâmetro da função. Nesse caso, temos o parâmetro "nome".

// Parâmetros são como valores coringas; o valor de um parâmetro deverá ser informado quando a função for executada. Para executarmos nossa função, basta "chamar" seu nome e colocar parênteses em seguida, informando dentro dos parênteses qual valor do parâmetro "nome":

boasVindas('Mariana');  // Aqui o valor do parâmetro nome é a string "Mariana"
boasVindas(42); // Aqui o valor do parâmetro nome é o número 42

// "return" é a palavra reservada que define qual resposta a função oferece. Nessa execução, não poderemos visualizar isso porque não estamos utilizando o método console.log()

// Mas se executarmos as funções dessa forma, poderemos ver:

console.log(boasVindas('Mariana')); 

let resultado = boasVindas(42);
console.log(resultado);

// As duas formas são válidas para trabalhar com o retorno da função. A primeira executa a função "dentro" do console.log(). Depois que essa função mais interna é resolvida, o console.log é executado e nos dá a mensagem no terminal: "Seja bem-vindo Mariana".

// A segunda execução armazena o retorno da função na variável resultado e exibe o valor de resultado através do método console.log na linha 23.

--------------------------------------------------------------

// Exemplo 2 - Funções sem parâmetro, funções sem retorno.

// Nem toda função possui um retorno, nem toda função possui parâmetros. Funções, como tudo em programação, são ferramentas que a gente adapta para as nossas necessidades. Elas têm uma estrutura básica, mas a partir disso, a imaginação (e a necessidade) é o limite;

// Considere a seguinte função:

function mensagemDespedida() {
    console.log("Muito obrigado por utilizar nossos serviços");
}

mensagemDespedida();

// Essa função "mensagemDespedida" não requer nenhum parâmetro;
// Quando ela é executada, ela imprime no terminal o texto que está dentro do console.log;

// Porém, considere a seguinte execução:

let resposta = mensagemDespedida();

// Qual valor está contido na variável resposta?

console.log(resposta); // E aí, adivinhou certo?


// Isso acontece porque a função "mensagemDespedida" não possui "return". Ela não "devolve" nenhuma informação após sua execução, apenas loga no terminal um texto.

--------------------------------------------------------------

// Exemplo 3 - Arrow Function:

// Existe outra forma de declararmos uma função em JavaScript, declarando-a como uma "arrow function";

const myFunction = (parametro1, parametro2) => {
    let a = parametro1;
    let b = parametro2;
    return [a, b]; // É possível manipular o retorno da função para devolver a informação no formato que desejarmos. Neste caso, a função retorna um array composto por a e b.
}

console.log(myFunction(3, 4));

// A estrutura da arrow function consiste da palavra reservada "const" seguida do nome da variável, sinal de igualdade, parênteses (e dentro dos parênteses vão os parâmetros), outro sinal de igual e o sinal de > (maior que), seguidos finalmente pelas chaves.

// As duas funções a seguir são idênticas com exceção do nome da função (que não pode ser repetido):

const essaFuncao = (msg) => {
    console.log(msg);
    return msg;
}

function outraFuncao(msg) {
    console.log(msg);
    return msg;
}

// Arrow functions recebem esse nome por causa dessa estrutura "=>" que lembra uma flecha... 
// Não é uma estrutura muito bonita, mas é importante saber e experimentar usar porque é amplamente utilizada.

-------------------------

//Funções "anônimas":

//Existe uma tereceira forma de estruturar uma função, e uma delas é estrutura-la como uma função anonima;

// Começamos por declarar uma variável do tipo "const" e depois atribuir para ela uma function, que em si não tem nome.
// Existem outros exemplos de estrutura de funções anonimas, veremos eles nas aulas seguintes.

const minhaFunction = function (numero) {
    if (numero > 0) {
        return 'Esse número é positivo'
    } else {
        return 'Esse número é negativo'
    }
}


console.log(minhaFunction(24))
